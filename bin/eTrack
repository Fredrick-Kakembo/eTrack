<<<<<<< HEAD
#! /bin/bash
# set -eu

eTrack=$0
cd
while [ -h "$eTrack" ]; do
    eTrackDIR="$(cd -P "$(dirname "$0")" && pwd)"
    eTrack="$(readlink "$eTrack")"
    [[ $eTrack != /* ]] && eTrack="eTrackDIR/$eTrack"
done
eTrackDIR="$(cd -P "$(dirname "$eTrack")" && pwd)"

### Variables ####
OUTWD=
INDIR=
CPUS=4
REFERENCE=
VERSION="1.0"
eTrack=$0
ARGPARSED0=$0
ALLARGSPARSED=$@

usage() {
    cat <<EOF
Thanks for using eTrack $VERSION
Developed by as a mini-project by Group-4 EanBIT Residential Training 2

SYPNOSIS:
    An E.coli analysis Pipeline for Profiling it's epidemiology, virulence, phylogeny & resistome

USAGE:
    eTrack [options] --input --output --reference

GENERAL:
    -h/--help       Display this help and exit
    -c/--citation   Show citation and exit
    -v/--version    Print version and exit

MANDATORY OPTIONS:
    -i/--input      Path to the raw sequencces to be analyzed
    -o/--output     Name of ouput directory
    -r/--reference  Path to the reference genome(.fasta, .gb) [default="REF.fasta"]

OTHER OPTIONS:
    -t/--threads    Number of cores to use <integer> [default=$CPUS]
EOF
}
if [ $# == 0 ]; then
    usage
    exit 1
fi
#########  OPTIONS  ############
POSITIONAL=()
while [[ $# -gt 0 ]]; do
    ARGS="$1"
    case $ARGS in
    -i | --input)
        if [ "$2" ]; then
            INDIR=$2
            shift 2
        fi
        ;;
    -o | --output)
        if [ "$2" ]; then
            OUTWD=$2
            shift 2
        fi
        ;;
    -r | --reference)
        if [ "$2" ]; then
            REFERENCE=$2
            shift 2
        fi
        ;;
    -t | --threads)
        if [ "$2" -eq "$2" ] 2>/dev/null; then
            CPUS=$2
            shift 2
        else
            echo -e 'ERROR: "-t/--threads" requires a numeric argument\n'
            echo -e "Selected cores: $2\n"
            exit 1
        fi
        ;;
    -h | --help)
        usage
        exit 1
        ;;
    -v | --version)
        echo "This is eTrack version $VERSION"
        exit 1
        ;;
    -c | --citation)
        echo -e "If using eTrack, please cite:"
        echo -e "https://github.com/GunzIvan28/eTrack"
        exit 1
        ;;
    *)
        echo -e "\nERROR: unknown option: $1 \n"
        usage
        exit 1
        ;;
    esac
done
set -- "${POSITIONAL[@]}"

###----------------------------Creating work directories
mkdir -p $OUTWD/{fastqc_files,annotation,mlsts,assembly,resistome,quality_assembly,reports,phylogenetics,snps}
ls $INDIR >$OUTWD/temp.txt
cat $OUTWD/temp.txt | cut -d. -f1 | rev | cut -c7- | rev | uniq >$OUTWD/list.txt
rm -rf $OUTWD/temp.txt
if [ -e "REFERENCE" ]; then

    ## 1. QUALITY ASSESSMENT ##
    gzip $INDIR/*.fastq
    fastqc $INDIR/*.gz --outdir $OUTWD/fastqc_files
    cd $OUTWD/fastqc_files
    multiqc . --force --outdir .
    rm -rf *.zip
    echo -e "Quality assessment successfully completed"
    cd

    ## 2. ASSEMBLY
    for sample in $(cat $OUTWD/list.txt); do
        mkdir -p $OUTWD/assembly/${sample}
        X=${sample}_trim1.fastq.gz
        Y=${sample}_trim2.fastq.gz
        unicycler -1 $INDIR/$X -2 $INDIR/$Y -t $CPUS -o $OUTWD/assembly/${sample}
    done
    echo -e "Assembly successfully completed"

    ## 3. ASSEMBLY QUALITY ASSESSMENT
    for n in $(cat $OUTWD/list.txt); do
        quast $OUTWD/assembly/${n}/${n}.fasta -o $OUTWD/quality_assembly/${n}_stats -t $CPUS --min-contig 200 --silent
    done
    echo -e "Quality stats for assembly completed"

    ## 4. ANNOTATION
    for x in $(cat $OUTWD/list.txt); do
        mkdir -p $OUTWD/assembly/${x}
        prokka --outdir $OUTWD/annotation/${x} --prefix ${x} $OUTWD/assembly/${x}/$x.fasta --cpus $CPUS --locustag $x
    done
    echo -e "Quality stats for assembly completed"

    ## 5. AMR,PLASMIDS,VIRULENCE
    ### amr
    abricate --setupdb
    for sample in $(cat $OUTWD/list.txt); do
        mkdir -p $OUTWD/resistome/ABRICATE/${sample}
        for i in resfinder card argannot ncbi; do
            abricate $OUTWD/assembly/${sample}/${sample}.fasta --threads 8 --nopath --db $i >$OUTWD/resistome/ABRICATE/${sample}/$sample_$i.tab
            abricate --summary $OUTWD/resistome/ABRICATE/${sample}/*.tab >$OUTWD/resistome/ABRICATE/${sample}/summary.tab
        done
    done
    ### plasmids and virulence factors
    mkdir -p $OUTWD/resistome/virulence_factors
    for sample in $(cat $OUTWD/list.txt); do
        abricate $OUTWD/assembly/${sample}/${sample}.fasta --threads 8 --nopath --db vfdb >$OUTWD/resistome/virulence_factors/$sample.tab
    done
    abricate --summary $OUTWD/resistome/virulence_factors/*.tab >$OUTWD/resistome/virulence_factors/summary-vf.tab
    ### ----------------------------------------------------------------------------------------------------------------
    mkdir -p $OUTWD/resistome/plasmids
    for sample in $(cat $OUTWD/list.txt); do
        abricate $OUTWD/assembly/${sample}/${sample}.fasta --threads 8 --nopath --db plasmidfinder >$OUTWD/resistome/plasmids/$sample.tab
    done
    abricate --summary $OUTWD/resistome/plasmids/*.tab >$OUTWD/resistome/plasmids/summary-plasmids.tab

    ### 6. MLSTS
    mkdir -p $OUTWD/mlsts
    for w in $(cat $OUTWD/list.txt); do
        mlst --threads $CPUS $OUTWD/assembly/${w}/${w}.fasta >$OUTWD/mlsts/${w}_mlst.tsv
    done
    cat $OUTWD/mlsts/*.tsv >$OUTWD/mlsts/summary-mlst.tsv

    ## 7. VARIANT CALLING
    mkdir -p $OUTWD/snps
    for c in $(cat $OUTWD/list.txt); do
        mkdir -p $OUTWD/snps/${c}
        X=${sample}_trim1.fastq.gz
        Y=${sample}_trim2.fastq.gz
        snippy --cpus $CPUS --outdir $OUTWD/snps/${c} --ref $REFERENCE --R1 $INDIR/$X --R2 $INDIR/$Y
    done

    ## 8. PANGENOME ANALYSIS
    SVG_CONVERT="eTrackDIR/../files/roary2svg.pl"
    CAIRO_SVG="$(which cairosvg)"
    mkdir -p $OUTWD/gff
    for c in $(cat $OUTWD/list.txt); do
        cp -rf $OUTWD/annotation/${c}/${c}.gff $OUTWD/gff
    done
    roary -e -n -f $OUTWD/pangenome -p $CPUS $OUTWD/gff/*.gff
    perl $SVG_CONVERT $OUTWD/pangenome/gene_presence_absence.csv --colour=Blue >$OUTWD/pangenome/pangenome.svg
    $CAIRO_SVG $OUTWD/pangenome/pangenome.svg -o $OUTWD/pangenome/pangenome.png
    rm -rf $OUTWD/gff

## 9. PHYLOGENETICS

# ## REPORTING----- SHINNY APP
else
    echo "Wrong reference provided, please check!!\nProvide either a '.fasta' or '.gbk'"
fi
=======
#! /bin/bash
# set -eu

## 0.SOFTWARE MENU------------------------------------------ ##########

## 1. QUALITY CONTROL AND TRIMMING METHODS

mkdir Fastqc_files # Create an output directory for the fastqc files
fastqc data/*.fastq -o Fastqc_files # Run fastqc on all fastq files in the data directory

## Perform multiqc for the Forward and Reverse Reads separately
multiqc Fastqc_files/ --ignore *_trim2_* && mv multiqc_data multiqc_R1_data && mv multiqc_report.html multiqc_report_R1.html #Forward
multiqc Fastqc_files/ --ignore *_trim1_* && mv multiqc_data multiqc_R2_data && mv multiqc_report.html multiqc_report_R2.html #Reverse

## 2. ASSEMBLY, SCAFFOLDING, ANNOTATION


## we use a for loop to run de novo assembly using unicycler tool, annotation, mlst and virulence for each sample

for sample in `cat list.txt`
do	## Do the assembly using the unicycler tool
    mkdir assembly # Create an output directory for all the assembly output
    unicycler -1 eanbit_amr/${sample}_trim1.fastq -2 eanbit_amr/${sample}_trim2.fastq -o assembly/${sample}_out

	## check the quality of the assembly using quast tool for each sample
	quast.py assembly/${sample}_out/assembly.fasta -o quality_assembly

    ## Do the annotation with prokka using the assembled contigs
    mkdir annotation # Create an output directory for all the annotation output
    prokka --outdir annotation/${sample}_prokka_out /assembly/${sample}_out/assembly.fasta
    
    ## Do the Multi-locus Sequence typing with mlst using the assembled contigs
    mkdir mlst # Create  an output directory for all the MLST out-put
    mlst --csv --scheme ecoli assembly/${sample}_out/assembly.fasta  > mlst/${sample}_mlst.csv
    
    ## Concatenate all the "mlst csv files" into a single csv file
    cat mlst/*.csv > mlst.csv

    ## Do Virulence with abricate using the assembled contigs
    mkdir Virulence #Create an output directory for all the Virulence output
    abricate --csv --db vfdb assembly/${sample}_out/assembly.fasta > Virulence/${sample}_virulence.csv

    ## Summarise all the abricate output into a single file
    abricate --summary Virulence/*.csv > Virulence.csv
done
## 3. VARIANT CALLING
snippy --outdir snippy_results/${sample}_snippy_results --ref reference.fna --ctgs assembly/${sample}_results/assembly.fasta 
## 4. AMR, VIRULENCE FACTORS, MLST AND PLASMIDS DETECTION

## 5. PANGENOME ANALYSIS

## 6. PHYLOGENETICS

## REPORTING
>>>>>>> b4c824eef14d13a7099aa57e036451e2c3f28cc8
